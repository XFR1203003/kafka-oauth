version: '3.6'

volumes:
  keycloak_postgres_data:
      driver: local

  zookeeper-data:
    driver: local
  zookeeper-log:
    driver: local
  kafka-data:
    driver: local
  elasticsearch-data:
    driver: local


services:
  postgres:
      image: postgres
      volumes:
        - keycloak_postgres_data:/var/lib/postgresql/data
      environment:
        POSTGRES_DB: keycloak
        POSTGRES_USER: keycloak
        POSTGRES_PASSWORD: password
  keycloak:
      image: quay.io/keycloak/keycloak:legacy
      environment:
        DB_VENDOR: POSTGRES
        DB_ADDR: postgres
        DB_DATABASE: keycloak
        DB_USER: keycloak
        DB_SCHEMA: public
        DB_PASSWORD: password
        KEYCLOAK_USER: admin
        KEYCLOAK_PASSWORD: Pa55w0rd
        # Uncomment the line below if you want to specify JDBC parameters. The parameter below is just an example, and it shouldn't be used in production without knowledge. It is highly recommended that you read the PostgreSQL JDBC driver documentation in order to use it.
        #JDBC_PARAMS: "ssl=true"
      ports:
        - 8080:8080
        - 8443:8443
        - 9990:9990
      depends_on:
        - postgres
      # command:
      #   - "-b 0.0.0.0"
      #   - "-Dkeycloak.profile.feature.upload_scripts=enabled"
      #   - "-Dkeycloak.import=/opt/jboss/keycloak/kafka-realm.json"
      # volumes:
      #   - ./keycloak/kafka-realm.json:/opt/jboss/keycloak/kafka-realm.json

  zookeeper:
    image: confluentinc/cp-zookeeper
    volumes:
      - ./oauth/zookeeper/zookeeper_server_jaas.conf:/etc/kafka/zookeeper_server_jaas.conf:r
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-log:/var/lib/zookeeper/log
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_LOG4J_ROOT_LOGLEVEL: INFO
      ZOOKEEPER_TOOLS_LOG4J_LOGLEVEL: DEBUG
      ZOOKEEPER_ADMIN_ENABLE_SERVER: 'false'
      ZOOKEEPER_SASL_ENABLED: 'true'
      # TODO prefer mTLS ?
      KAFKA_OPTS: -Djava.security.auth.login.config=/etc/kafka/zookeeper_server_jaas.conf
                -Dzookeeper.authProvider.1=org.apache.zookeeper.server.auth.SASLAuthenticationProvider
                -Dzookeeper.requireClientAuthScheme=sasl
                -Dzookeeper.allowSaslFailedClients=false
                -Dzookeeper.jaasLoginRenew=3600000
    ports:
      - 2181:2181
    links:
      - keycloak

  zookeeper-ui:
    image: tobilg/zookeeper-webui
    environment:
      ZK_DEFAULT_NODE: zookeeper:2181
      # can write to ZK
      USER: admin
      PASSWORD: admin
    ports:
    - 38080:8080
    links:
    - zookeeper


  kafka:
    image: confluentinc/cp-kafka:7.1.1.amd64
    volumes:
      - kafka-data:/var/lib/kafka
      - ./oauth/kafka-oauth/kafka_server_jaas.conf:/etc/kafka/kafka_server_jaas.conf:r
      - ./oauth/kafka-oauth/oauth-configuration.properties:/etc/kafka/oauth-configuration.properties:r
      - ./oauth/kafka-oauth/target/oauthbearer-1.0.0.jar:/usr/share/java/kafka/oauthbearer-1.0.0.jar:r
    environment:
      #
      # KAFKA Configuration
      #
      # LOG_DIR: /home/kafka/logs
      #KAFKA_LOG_DIRS: /home/kafka/1

      KAFKA_BROKER_ID: '1'
      KAFKA_NUM_PARTITIONS: '12'
      KAFKA_COMPRESSION_TYPE: 'gzip'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE: 'false'
      KAFKA_LOG4J_LOGGERS: "kafka=INFO,kafka.producer.async.DefaultEventHandler=WARN,kafka.controller=INFO,org.apache.kafka=INFO,state.change.logger=INFO"
      KAFKA_LOG4J_ROOT_LOGLEVEL: INFO
      KAFKA_TOOLS_LOG4J_LOGLEVEL: INFO
      KAFKA_JMX_PORT: '9091'

      # Zookeeper communication
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ZOOKEEEPER_PROTOCOL: SASL_PLAINTEXT
      ZOOKEEPER_SASL_ENABLED: 'true'

      KAFKA_CONNECTIONS_MAX_REAUTH_MS: 60000

      # Kafka SASL configuration
      # KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,SASL_PLAINTEXT:SASL_PLAINTEXT
      # KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092,SASL_PLAINTEXT://0.0.0.0:9093
      # KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092,SASL_PLAINTEXT://broker:9093
      # KAFKA_ADVERTISED_LISTENERS: CLIENT://host.docker.internal:9092

      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092, CLIENT://0.0.0.0:9093
      # KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092, CLIENT://host.docker.internal:9093
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://host.docker.internal:9092, CLIENT://host.docker.internal:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_CONTROLLER_LISTENER_NAME: INTERNAL

      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:SASL_PLAINTEXT, CLIENT:SASL_PLAINTEXT
      KAFKA_SASL_ENABLED_MECHANISMS: OAUTHBEARER
      KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: OAUTHBEARER
      KAFKA_SASL_MECHANISM_CONTROLLER_PROTOCOL: OAUTHBEARER
      KAFKA_LISTENER_NAME_INTERNAL_OAUTHBEARER_SASL_LOGIN_CALLBACK_HANDLER_CLASS: com.auchan.yoda.esp.security.oauthbearer.OAuthAuthenticateLoginCallbackHandler
      KAFKA_LISTENER_NAME_INTERNAL_OAUTHBEARER_SASL_SERVER_CALLBACK_HANDLER_CLASS: com.auchan.yoda.esp.security.oauthbearer.OAuthAuthenticateValidatorCallbackHandler
      KAFKA_LISTENER_NAME_CLIENT_OAUTHBEARER_SASL_LOGIN_CALLBACK_HANDLER_CLASS: com.auchan.yoda.esp.security.oauthbearer.OAuthAuthenticateLoginCallbackHandler
      KAFKA_LISTENER_NAME_CLIENT_OAUTHBEARER_SASL_SERVER_CALLBACK_HANDLER_CLASS: com.auchan.yoda.esp.security.oauthbearer.OAuthAuthenticateValidatorCallbackHandler

      # KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT, CLIENT:SASL_PLAINTEXT
      # KAFKA_SASL_ENABLED_MECHANISMS: OAUTHBEARER,PLAIN
      # KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: PLAIN
      # KAFKA_SASL_MECHANISM_CONTROLLER_PROTOCOL: PLAIN
      # KAFKA_LISTENER_NAME_INTERNAL_PLAIN_SASL_LOGIN_CALLBACK_HANDLER_CLASS: com.auchan.yoda.esp.security.oauthbearer.OAuthAuthenticateLoginCallbackHandler
      # KAFKA_LISTENER_NAME_INTERNAL_PLAIN_SASL_SERVER_CALLBACK_HANDLER_CLASS: com.auchan.yoda.esp.security.oauthbearer.OAuthAuthenticateValidatorCallbackHandler
      # KAFKA_LISTENER_NAME_CLIENT_OAUTHBEARER_SASL_LOGIN_CALLBACK_HANDLER_CLASS: com.auchan.yoda.esp.security.oauthbearer.OAuthAuthenticateLoginCallbackHandler
      # KAFKA_LISTENER_NAME_CLIENT_OAUTHBEARER_SASL_SERVER_CALLBACK_HANDLER_CLASS: com.auchan.yoda.esp.security.oauthbearer.OAuthAuthenticateValidatorCallbackHandler

      # Kafka JAAS configuration
      KAFKA_OPTS: "-Djava.security.auth.login.config=/etc/kafka/kafka_server_jaas.conf"

      # OAuth
      KAFKA_OAUTH_SERVER_PROP_FILE: /etc/kafka/oauth-configuration.properties
      KAFKA_AUTHORIZER_CLASS_NAME: 'com.auchan.yoda.esp.security.oauthbearer.CustomYodaAuthorizer'
      KAFKA_PRINCIPAL_BUILDER_CLASS: 'com.auchan.yoda.esp.security.oauthbearer.CustomPrincipalBuilder'

      # Kafka Security enable
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: 'false'
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      # TODO disable auto create topics

      # Access denials are logged at INFO level, change to DEBUG to also log allowed accesses
      KAFKA_LOG4J_LOGGER_KAFKA_AUTHORIZER_LOGGER: "DEBUG, authorizerAppender"
      KAFKA_LOG4J_ADDITIVITY_KAFKA_AUTHORIZER_LOGGER: "true"

      # Java Debug
      #KAFKA_DEBUG: y
      #DEBUG_SUSPEND_FLAG: y
      #JAVA_DEBUG_PORT: 5005
    ports:
      - 9091:9091 # JMX
      - 9092:9092 # INTERNAL broker connections
      - 9093:9093 # CLIENT broker connections
      # javaagent debug port
      # - 5005:5005
    depends_on:
      - zookeeper
      - keycloak
    extra_hosts:
      - "host.docker.internal:host-gateway"

  schema-registry:
    image: confluentinc/cp-schema-registry
    platform: linux/amd64
    depends_on:
      - kafka
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'PLAINTEXT://kafka:9092'
      SCHEMA_REGISTRY_HOST_NAME: 'schema-registry'
      SCHEMA_REGISTRY_LISTENERS: 'http://0.0.0.0:8085'
      SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: 'INFO'
      #SCHEMA_REGISTRY_DEBUG: 'true'
    ports:
    - 8085:8085

  rest-proxy:
    image: confluentinc/cp-schema-registry
    platform: linux/amd64
    depends_on:
      - zookeeper
      - kafka
      - schema-registry
    environment:
      KAFKA_REST_BOOTSTRAP_SERVERS: 'PLAINTEXT://kafka:9092'
      KAFKA_REST_HOST_NAME: 'rest-proxy'
      KAFKA_REST_LISTENERS: 'http://0.0.0.0:8082'
      KAFKA_REST_SCHEMA_REGISTRY_URL: http://schema-registry:8085
    ports:
    - 8082:8082

  connect:
    image: confluentinc/cp-kafka-connect
    platform: linux/amd64
    depends_on:
      - kafka
      - schema-registry
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'kafka:9092'
      CONNECT_REST_PORT: '8083'
      CONNECT_REST_LISTENERS: 'http://0.0.0.0:8083'
      CONNECT_REST_ADVERTISED_HOST_NAME: 'connect'
      CONNECT_CONFIG_STORAGE_TOPIC: '__connect-config'
      CONNECT_OFFSET_STORAGE_TOPIC: '__connect-offsets'
      CONNECT_STATUS_STORAGE_TOPIC: '__connect-status'
      CONNECT_GROUP_ID: 'kafka-connect'
      CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: 'true'
      CONNECT_KEY_CONVERTER: 'io.confluent.connect.avro.AvroConverter'
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8085'
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: 'true'
      CONNECT_VALUE_CONVERTER: 'io.confluent.connect.avro.AvroConverter'
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8085'
      CONNECT_INTERNAL_KEY_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter'
      CONNECT_INTERNAL_VALUE_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter'
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: '1'
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: '1'
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: '1'
      CONNECT_PLUGIN_PATH: ' /usr/share/java/'
    ports:
    - 8083:8083

  akhq:
    # build:
    #   context: .
    image: tchiotludo/akhq
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: "kafka:9092"
              # schema-registry:
              #   url: "http://schema-registry:8085"
              # connect:
              #   - name: "connect"
              #     url: "http://connect:8083"
    ports:
      - 18080:8080
    links:
      - kafka
      # - schema-registry
      # - connect


  consumer-example:
    image: kafka-security/consumer-example
    build: ./kafka-consumer-example
    environment:
      BOOTSTRAP_SERVERS: kafka:9093
    links:
      - kafka

  producer-example:
    image: kafka-security/producer-example
    build: ./kafka-producer-example
    environment:
      BOOTSTRAP_SERVERS: kafka:9093
    links:
      - kafka


  # test-data:
  #   image: gradle:6.3-jdk11
  #   command: "gradle --no-daemon testInjectData"
  #   working_dir: /app
  #   volumes:
  #     - ./:/app:z
  #   links:
  #     - kafka
  #     - schema-registry
  #
  # kafkacat:
  #   image: confluentinc/cp-kafkacat
  #   depends_on:
  #     - kafka
  #   command:
  #     - bash
  #     - -c
  #     - |
  #       kafkacat -P -b kafka:9092 -t json << EOF
  #       {"_id":"5c4b2b45ab234c86955f0802","index":0,"guid":"d3637b06-9940-4958-9f82-639001c14c34"}
  #       {"_id":"5c4b2b459ffa9bb0c0c249e1","index":1,"guid":"08612fb5-40a7-45e5-9ff2-beb89a1b2835"}
  #       {"_id":"5c4b2b4545d7cbc7bf8b6e3e","index":2,"guid":"4880280a-cf8b-4884-881e-7b64ebf2afd0"}
  #       {"_id":"5c4b2b45dab381e6b3024c6d","index":3,"guid":"36d04c26-0dae-4a8e-a66e-bde9b3b6a745"}
  #       {"_id":"5c4b2b45d1103ce30dfe1947","index":4,"guid":"14d53f2c-def3-406f-9dfb-c29963fdc37e"}
  #       {"_id":"5c4b2b45d6d3b5c51d3dacb7","index":5,"guid":"a20cfc3a-934a-4b93-9a03-008ec651b5a4"}
  #       EOF
  #       kafkacat -P -b kafka:9092 -t csv << EOF
  #       1,Sauncho,Attfield,sattfield0@netlog.com,Male,221.119.13.246
  #       2,Luci,Harp,lharp1@wufoo.com,Female,161.14.184.150
  #       3,Hanna,McQuillan,hmcquillan2@mozilla.com,Female,214.67.74.80
  #       4,Melba,Lecky,mlecky3@uiuc.edu,Female,158.112.18.189
  #       5,Mordecai,Hurdiss,mhurdiss4@rambler.ru,Male,175.123.45.143
  #       EOF
  #       kafkacat -b kafka:9092 -o beginning -G json-consumer json
  #   links:
  #     - kafka
